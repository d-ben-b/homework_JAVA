#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int win();
void save();
void show();
void check();
void count();
void welcome();
void readfile();
void battle(int black,int white);

static int white;
static int black;
static char g_cmd;
static int board[10];
static int location[2];
static int Gobang[10][10];

int main()
{
    welcome();
    return 0;
}

void readfile()
{
    int i = 0;
    FILE *pfile = fopen("board.txt","r");
    int k = 0;
    for( i = 0; i < 10; i++)
    {
        char num[11];
        fscanf(pfile, "%s", &num);
        for (k = 0; k < 10; k++)
        {
            Gobang[i][k] = num[k] -'0';
        }
    }
    show();
    fclose(pfile);
}

void save()
{
    FILE *pfile = fopen("board.txt","w");
    int j = 0;
    int k = 0;
    for(j; j < 10; j++)
    {
        for(k = 0; k < 10; k++)
        {
            fprintf(pfile,"%d",Gobang[j][k]);
        }
        fprintf(pfile,"\n");
    }
    fclose(pfile);
}

void create()
{
    FILE *pfile = fopen("board.txt","w");
    int j = 0;
    for(j; j < 100; j++)
    {
        fprintf(pfile,"0");
        if (j % 10 == 9)
        {
            fprintf(pfile,"\n");
        }
    }
    fclose(pfile);
}

void show()
{
    char show_msg[] = "-OX";
    int j = 0;
    int k = 0;
    for(j; j < 10; j++)
    {
        for(k; k < 10; k++)
        {
            if (Gobang[j][k] == 0)
            {
                printf("%c",show_msg[0]);
            }
            else if (Gobang[j][k] == 1)
            {
                printf("%c",show_msg[1]);
            }
            else if(Gobang[j][k] == 2)
            {
                printf("%c",show_msg[2]);
            }
            else
            {
                printf("%c",Gobang[j][k]);
            }
        }
        printf("\n");
        k = 0;
    }
    printf("其中以-為空白，X為黑棋，O為白旗\n\n");
}

void welcome()
{
    printf("歡迎來到終極五子棋大亂鬥！");
    printf("\n");
    printf("請先選擇進行遊戲的方式：輸入 c 為創建新的棋盤一切重新來過，輸入 r 為讀取存檔繼續戰鬥！");
    printf("\n");
    while(1 > 0)
    {
        printf("請選擇進行遊戲的方式：");
        scanf("%c", &g_cmd);
        if (g_cmd == 'c')
        {
            printf("已建立棋盤！\n");
            show();
            create();
            battle(0,0);
            break;
        }
        else if (g_cmd == 'r')
        {
            readfile();
            count();
            battle(black,white);
            break;
        }
        else
        {
            printf("輸入錯誤！在試一次\n");
        }
        while(getchar()!='\n');
    }
}

void battle(int black,int white)
{
    int flag = 0;
    char name[8];
    int loopflag = 0;
    char cmd[10];
    if(black == white)
    {
        printf("本次戰鬥由黑色方先進攻！\n");
    }
    else if (black > white)
    {
        printf("本次戰鬥由白色方先進攻！\n");
        flag = 1;
    }
    else if (black < white)
    {
        printf("本次戰鬥由黑色方先進攻！\n");
    }
    while(loopflag == 0)
    {
       if (flag == 0)
       {
            strcpy(name, "Trevor");
            printf("請由代表黑色方的玩家:");
       }
       else if (flag == 1)
       {
            strcpy(name, "Michael");
            printf("請由代表白色方的玩家:");
       }
       printf("%s做出決定，格式為：a,b\n",name);
       printf("請輸入座標，或是輸入quit離開遊戲：");
       scanf("%s", &cmd);
       int i = 0;
       char *p = strtok(cmd, ",");
       for (i = 0; i < 2; i++)
       {
            location[i] = atoi(p);
            p = strtok(NULL, ",");
       }
       if (flag == 0 &&
           Gobang[10 - location[1]][location[0] - 1] == 0 &&
           (10 - location[1]) < 10 &&
           (location[0] - 1 ) < 10 )
       {
           Gobang[10 - location[1]][location[0] - 1] = 2;
           show();
       }
       else if (flag == 1 &&
                Gobang[10 - location[1]][location[0] - 1] == 0 &&
                (10 - location[1]) < 10 &&
                (location[0] - 1 ) < 10 )
       {
           Gobang[10 - location[1]][location[0] - 1] = 1;
           show();
       }
       else if (0 == strcmp(cmd,"quit"))
       {
           printf("%s輸入quit，雙方平手",name);
           loopflag = 1;
           exit(0);
       }
       else
       {
           printf("%s犯規！\n",name);
           loopflag = 1;
           exit(0);
       }
       while(getchar()!='\n');
       save();
       if (1 == win(1))
       {
            printf("請由代表白色方的玩家:");
            printf("%s上台領獎\n",name);
            loopflag = 1;
            exit(0);
       }
       if (2 == win(2))
       {
           printf("請由代表黑色方的玩家:");
           printf("%s上台領獎\n",name);
           loopflag = 1;
           exit(0);
       }
       check();
       flag = (flag + 1)%2;
    }
}

void count()
{
    int j = 0;
    int k = 0;
    for(j; j < 10; j++)
    {
        for(k = 0; k < 10; k++)
        {
          if (Gobang[j][k] == 1)
          {
              white++;
          }
          else if(Gobang[j][k] == 2)
          {
              black++;
          }
        }
    }
}

int win(int A)
{
    int row = 0;
    int max_c = 0;
    int max_r = 0;
    int column = 0;
    int result_c = 0;
    int result_r = 0;
    for (row = 0; row < 10; row++)/**橫行連線*/
    {
        for (column = 0; column < 10; column++)
        {
            if(Gobang[row][column] == A)
            {
                result_c++;
            }
            else if (Gobang[row][column] != A)
            {
                if (max_c < result_c)
                {
                    max_c = result_c;
                }
            result_c = 0;
            }
        }
    result_c = 0;
    column = 0;
    if (max_c == 5)
    {
        printf ("恭喜獲勝！");
        return A;
    }
    max_c = 0;
    }

    for (column = 0; column < 10; column++)/**直行連線 */
    {
        for (row = 0; row < 10; row++)
        {
            if(Gobang[row][column] == A)
            {
                result_r++;
            }
            else if (Gobang[row][column] != A)
            {
                if (max_r < result_r)
                {
                    max_r = result_r;
                }
            result_r = 0;
            }
        }
    row = 0;
    if (max_r == 5)
    {
        printf ("恭喜獲勝！");
        return A;
    }
    max_r = 0;
    result_r = 0;
    }
    int i;
    int j;
    for(j = 0; j <= 5; j++)
    {
        for(i = 0; i <= 5; i++)
        {
            if( Gobang[0 + i][0 + j] == A &&
                Gobang[1 + i][1 + j] == A &&
                Gobang[2 + i][2 + j] == A &&
                Gobang[3 + i][3 + j] == A &&
                Gobang[4 + i][4 + j] == A )
            {
                printf ("恭喜獲勝！");
                return A;
            }


            if( Gobang[0+ j][4+ i] == A &&
                Gobang[1+ j][3+ i] == A &&
                Gobang[2+ j][2+ i] == A &&
                Gobang[3+ j][1+ i] == A &&
                Gobang[4+ j][0+ i] == A )
            {
                printf ("恭喜獲勝！");
                return A;
            }
        }
    }
}

void check()
{
    int i;
    int j;
    int empty = 0;
    for (i = 0; i < 10; i++)
    {
        for(j = 0; j < 10; j++)
        {
            if (Gobang[i][j] == 0)
            {
                empty ++;
            }
        }
    }
    if (empty == 0)
    {
        printf ("棋盤已滿！雙方平手！\n");
        exit(0);
    }
}


